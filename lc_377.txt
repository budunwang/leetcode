377.Combination Sum IV
322
dp
public int combinationSum4(int[] nums, int target) {
    Arrays.sort(nums);
    int[] dp = new int[target + 1];
    dp[0] = 1;
    for (int i = 1; i <= target; i++) {
        int sum = 0;
        for (int j = 0; j < nums.length && nums[j] <= i; j++) { 
            sum += dp[i - nums[j]];
        }
        dp[i] = sum;
    }
    return dp[target];
}

dfs TLE
public int combinationSum4(int[] nums, int target) {
    Arrays.sort(nums);
    return dfs(nums, target);
}

public int dfs(int[] nums, int target) {
    if (target == 0) {
        return 1;
    }
    int sum = 0;
    for (int i = 0; i < nums.length; i++) {
        if (target - nums[i] >= 0) {
            sum += dfs(nums, target - nums[i]);
        }
    }
    return sum;
}

dfs + memo TLE
public int combinationSum4(int[] nums, int target) {
    Arrays.sort(nums);
    int[] dp = new int[target + 1];
    dp[0] = 1;
    dfs(nums, target, dp);
    return dp[target];
}

public int dfs(int[] nums, int target, int[] dp) {
    if (dp[target] != 0) {
        return dp[target];
    }
    int sum = 0;
    for (int i = 0; i < nums.length; i++) {
        if (target - nums[i] >= 0) {
            sum += dfs(nums, target - nums[i], dp);
        }
    }
    dp[target] = sum;
    return dp[target];
}