37.Sudoku Solver
dfs
public void solveSudoku(char[][] board) {
    dfs(board);
}

public boolean dfs(char[][] board) {
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            if (board[i][j] == '.') {
                for (int k = 0; k < 9; k++) {
                    char c = (char)('0' + k + 1);
                    if (isValid(board, i, j, c)) {
                        board[i][j] = c;
                        if (dfs(board)) {
                            return true;                                
                        }
                        board[i][j] = '.';
                    }
                }
                return false;
            }
        }
    }
    return true;
}

public boolean isValid(char[][] board, int row, int col, char c) {
    for (int i = 0; i < 9; i++) {
        int square_row = (row / 3) * 3;
        int square_col = (col / 3) * 3;
        if (board[row][i] == c || board[i][col] == c || board[square_row + i / 3][square_col + i % 3] == c) {
            return false;
        }
    }
    return true;
}