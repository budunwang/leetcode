935.Knight Dialer
动态规划。
dp[current_step] = dp[last_time_step_1] + dp[last_time_step_2] + ... dp[last_time_step_n] 
public int knightDialer(int N) {
    int res = 0;
    int dp[] = new int[] {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    for (int i = 2; i <= N; i++) {
        int tmp[] = new int[10];
        for (int j = 0; j < 10; j++) {
            int[] arr = dial(j);
            for (int num : arr) {
                tmp[j] = (int)((tmp[j] + dp[num]) % (Math.pow(10, 9) + 7));
            }
        }
        dp = tmp;
    }
    for (int n : dp) {
        res = (int)((res + n) % (Math.pow(10, 9) + 7));
    }
    return res;
}

public int[] dial(int num) {
    switch (num) {
        case 0: 
            return new int[]{4, 6};
        case 1: 
            return new int[]{6, 8};
        case 2:
            return new int[]{7, 9};
        case 3:
            return new int[]{4, 8};
        case 4:
            return new int[]{3, 9, 0};
        case 5:
            return new int[]{};
        case 6:
            return new int[]{1, 7, 0};
        case 7:
            return new int[]{2, 6};
        case 8:
            return new int[]{1, 3};
        case 9:
            return new int[]{2, 4};
        default:
            return new int[]{};
    }
}