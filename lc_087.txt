87.Scramble String
dfs
public boolean isScramble(String s1, String s2) {
    if (s1.length() != s2.length()) {
        return false;
    }
    return isScramble(s1, s2, 0, s1.length() - 1, 0, s2.length() - 1);
}

public boolean isScramble(String s1, String s2, int start1, int end1, int start2, int end2) {
    if (start1 == end1) {
        return s1.charAt(start1) == s2.charAt(start2);
    }
    if (!isSame(s1, s2, start1, end1, start2, end2)) {
        return false;
    }
    for (int i = 0; start1 + i < end1; i++) {
        boolean isValid1 = isScramble(s1, s2, start1, start1 + i, start2, start2 + i) && isScramble(s1, s2, start1 + i + 1, end1, start2 + i + 1, end2);
        boolean isValid2 = isScramble(s1, s2, start1, start1 + i, end2 - i, end2) && isScramble(s1, s2, start1 + i + 1, end1, start2, end2 - i - 1);
        if (isValid1 || isValid2) {
            return true;
        }
    }
    return false;
}

public boolean isSame(String s1, String s2, int start1, int end1, int start2, int end2) {
    int[] map1 = new int[26];
    int[] map2 = new int[26];
    for (int i = 0; start1 + i <= end1; i++) {
        map1[s1.charAt(start1 + i) - 'a']++;
        map2[s2.charAt(start2 + i) - 'a']++;
    }
    for (int i = 0; i < 26; i++) {
        if (map1[i] != map2[i]) {
            return false;
        }
    }
    return true;
}