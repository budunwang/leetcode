148.Sort List
merge sort
public ListNode sortList(ListNode head) {
    if (head == null || head.next == null) {
        return head;
    }
    ListNode fast = head;
    ListNode slow = head;
    ListNode mark = null;
    while (fast != null && fast.next != null) {
        mark = slow;
        fast = fast.next.next;
        slow = slow.next;
    }
    mark.next = null;
    ListNode node_1 = sortList(head);
    ListNode node_2 = sortList(slow);
    return merge(node_1, node_2);
}

public ListNode merge(ListNode n1, ListNode n2) {
    ListNode dummy = new ListNode(0);
    ListNode tmp = dummy;
    while (n1 != null && n2 != null) {
        if (n1.val < n2.val) {
            tmp.next = n1;
            n1 = n1.next;
        } else {
            tmp.next = n2;
            n2 = n2.next;
        }
        tmp = tmp.next;
    }
    if (n1 == null) {
        tmp.next = n2;
    }
    if (n2 == null) {
        tmp.next = n1;
    }
    return dummy.next;
}