1449.Form Largest Integer With Digits That Add up to Target
dp
public String largestNumber(int[] cost, int target) {
    String[][] dp = new String[10][target + 1];
    for (int i = 0; i < target + 1; i++) {
        dp[0][i] = "0";
    }
    dp[0][0] = "";
    for (int i = 1; i < 10; i++) {
        for (int j = 0; j < target + 1; j++) {
            dp[i][j] = "";
        }
    }
    for (int i = 1; i < 10; i++) {
        for (int j = 1; j <= target; j++) {
            String str1 = dp[i - 1][j];
            String str2 = j - cost[i - 1] >= 0 && dp[i][j - cost[i - 1]] != "0" ? (char)('1' + i - 1) + dp[i][j - cost[i - 1]] : "";
            dp[i][j] = strMax(str1, str2);
        }
    }
    return dp[9][target];
}

public String strMax(String str1, String str2) {
    int length1 = str1.length();
    int length2 = str2.length();
    if (length1 != length2) {
        return length1 > length2 ? str1 : str2;
    } else {
        for (int i = 0; i < length1; i++) {
            int n1 = str1.charAt(i) - '0';
            int n2 = str2.charAt(i) - '0';
            if (n1 != n2) {
                return n1 > n2 ? str1 : str2;
            }
        }
    }
    return str2;
}