164.Maximum Gap
bucket sort
O(N)
max gap >= (max - min) / (length - 1)
Set the bucket range as (max - min) / (length - 1)
The start and end of max gap must be at two different continuous bucket.
The start is the max one at first bucket.
The end is the min one at second bucket. 
public int maximumGap(int[] nums) {
    if (nums.length <= 1) {
        return 0;
    }
    int min = Integer.MAX_VALUE;
    int max = Integer.MIN_VALUE;
    for (int num : nums) {
        min = Math.min(min, num);
        max = Math.max(max, num);
    }
    if (min == max) {
        return 0;
    }
    int gap = (int) Math.ceil((double) (max - min) / (nums.length - 1));
    int[] bucketMin = new int[nums.length];
    int[] bucketMax = new int[nums.length];
    Arrays.fill(bucketMin, Integer.MAX_VALUE);
    Arrays.fill(bucketMax, Integer.MIN_VALUE);
    for (int num : nums) {
        int idx = (num - min) / gap;
        bucketMin[idx] = Math.min(bucketMin[idx], num);
        bucketMax[idx] = Math.max(bucketMax[idx], num);
    }
    int prev = min;
    int curMax = Integer.MIN_VALUE;
    for (int i = 0; i < nums.length; i++) {
        if (bucketMin[i] != Integer.MAX_VALUE) {
            curMax = Math.max(curMax, bucketMin[i] - prev);
            prev = bucketMax[i];
        }
    }
    return curMax;
}