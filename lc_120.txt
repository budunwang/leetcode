// 动态规划
public int minimumTotal(List<List<Integer>> triangle) {
	if (triangle == null) {
		return 0;
	}
	List<Integer> res = triangle.get(triangle.size() - 1);
	for (int i = triangle.size() - 1; i > 0; i--) {
		for (int j = 0; j < triangle.get(i - 1).size(); j++) {
			res.set(j, triangle.get(i - 1).get(j) + Math.min(res.get(j), res.get(j + 1)));
		}
	}
	return res.get(0);
}

// 使用DFS进行遍历会超时
public int minimumTotal(List<List<Integer>> triangle) {
	if (triangle == null) {
		return 0;
	}
	List<Integer> sums = new ArrayList<Integer>();
	helper(sums, triangle, 0, 0, 0);
	Collections.sort(sums);
	return sums.get(0);
}

public void helper(List<Integer> sums, List<List<Integer>> triangle, int level, int index ,int sum) {
	List<Integer> list = triangle.get(level);
	int num = list.get(index);
	if (level == triangle.size() - 1) {
		sums.add(sum + num);
		return;
	}
	helper(sums, triangle, level + 1, index, sum + num);
	helper(sums, triangle, level + 1, index + 1, sum + num);
}