1139.Largest 1-Bordered Square
rows: rows max length
cols: cols max length
min(rows[i][j], cols[i][j]) is the max possible length of Square
check top right corner and bottom left corner
public int largest1BorderedSquare(int[][] grid) {
    int row = grid.length;
    int col = grid[0].length;
    int[][] rows = new int[row + 1][col + 1];
    int[][] cols = new int[row + 1][col + 1];
    for (int i = 1; i <= row; i++) {
        for (int j = 1; j <= col; j++) {
            rows[i][j] = grid[i - 1][j - 1] == 0 ? 0 : rows[i][j - 1] + 1;
        }
    }
    for (int i = 1; i <= col; i++) {
        for (int j = 1; j <= row; j++) {
            cols[j][i] = grid[j - 1][i - 1] == 0 ? 0 : cols[j - 1][i] + 1;
        }
    }
    int max = 0;
    for (int i = 1; i <= row; i++) {
        for (int j = 0; j <= col; j++) {
            int curMax = Math.min(rows[i][j], cols[i][j]);
            for (int k = 1; k <= curMax; k++) {
                if (i - k + 1 >= 0 && rows[i - k + 1][j] >= k && j - k + 1 >= 0 && cols[i][j - k + 1] >= k) {
                    max = Math.max(max, k);
                }
            }
        }
    }
    return max * max;
}