994.Rotting Oranges
public int orangesRotting(int[][] grid) {
    int row = grid.length;
    int col = grid[0].length;
    Queue<int[]> queue = new LinkedList<int[]>();
    int count = 0;
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            if (grid[i][j] != 0) {
                count++;
            }
            if (grid[i][j] == 2) {
                queue.add(new int[] { i, j });
            }
        }
    }
    int level = -1;
    while (!queue.isEmpty()) {
        int size = queue.size();
        for (int i = 0; i < size; i++) {
            int[] arr = queue.poll();
            count--;
            int x = arr[0];
            int y = arr[1];
            if (x > 0 && grid[x - 1][y] == 1) {
                grid[x - 1][y] = 2;
                queue.add(new int[] { x - 1, y });
            }
            if (x < row - 1 && grid[x + 1][y] == 1) {
                grid[x + 1][y] = 2;
                queue.add(new int[] { x + 1, y });
            }                
            if (y > 0 && grid[x][y - 1] == 1) {
                grid[x][y - 1] = 2;
                queue.add(new int[] { x, y - 1 });
            }
            if (y < col - 1 && grid[x][y + 1] == 1) {
                grid[x][y + 1] = 2;
                queue.add(new int[] { x, y + 1 });
            }
        }
        level++;
    }
    level = level == -1 ? 0 : level;
    return count == 0 ? level : -1;
}