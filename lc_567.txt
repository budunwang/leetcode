567.Permutation in String
438
Sliding window length: s1 length
public boolean checkInclusion(String s1, String s2) {
    int[] map_1 = new int[26];
    int[] map_2 = new int[26];
    for (char c : s1.toCharArray()) {
        map_1[c - 'a']++;
    }
    int length = s1.length();
    for (int right = 0; right < s2.length(); right++) {
        map_2[s2.charAt(right) - 'a']++;
        if (right - length >= 0) {
            map_2[s2.charAt(right - length) - 'a']--;
        }
        if (isEqual(map_1, map_2)) {
            return true;
        }

    }
    return false;
}

public boolean isEqual(int[] a1, int[] a2) {
    for (int i = 0; i < 26; i++) {
        if (a1[i] != a2[i]) {
            return false;
        }
    }
    return true;
}