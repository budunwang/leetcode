1774.Closest Dessert Cost
public int min;
public int max;

public int closestCost(int[] baseCosts, int[] toppingCosts, int target) {
    min = Integer.MAX_VALUE;
    max = Integer.MIN_VALUE;
    for (int i = 0; i < baseCosts.length; i++) {
        dfs(toppingCosts, target, 0, baseCosts[i]);
    }
    if (max == Integer.MIN_VALUE || target - max > min - target) {
        return min;
    }
    return max;
}

public void dfs(int[] toppingCosts, int target, int idx, int sum) {
    if (idx == toppingCosts.length) {
        if (sum <= target) {
            max = Math.max(max, sum); 
        } else {
            min = Math.min(min, sum);
        }
        return;
    }
    dfs(toppingCosts, target, idx + 1, sum);
    dfs(toppingCosts, target, idx + 1, sum + toppingCosts[idx]);
    dfs(toppingCosts, target, idx + 1, sum + 2 * toppingCosts[idx]);
}