1778.Shortest Path in a Hidden Grid
public char[] cs;
public int[][] dir;
public int[][] map;

public int findShortestPath(GridMaster master) {
    cs = new char[] { 'U', 'D', 'L', 'R' };
    dir = new int[][] {{ -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 }};
    map = new int[1001][1001];
    map[500][500] = 1;
    dfs(master, 500, 500);
    Queue<int[]> queue = new LinkedList<int[]>();
    queue.offer(new int[] { 500, 500 });
    int level = 0;
    while (!queue.isEmpty()) {
        int size = queue.size();
        for (int i = 0; i < size; i++) {
            int[] arr = queue.poll();
            for (int j = 0; j < 4; j++) {
                int n_x = arr[0] + dir[j][0];
                int n_y = arr[1] + dir[j][1];
                if (map[n_x][n_y] == 1) {
                    map[n_x][n_y] = -1;
                    queue.offer(new int[] { n_x, n_y });
                } else if (map[n_x][n_y] == 2) {
                    return level + 1;
                }
            }
        }
        level++;
    }
    return -1;
}

public void dfs(GridMaster master, int x, int y) {
    if (master.isTarget()) {
        map[x][y] = 2;
        return;
    }
    for (int i = 0; i < 4; i++) {
        int n_x = x + dir[i][0];
        int n_y = y + dir[i][1];
        if (map[n_x][n_y] == 0) {
            if (!master.canMove(cs[i])) {
                map[n_x][n_y] = -1;
            } else {
                map[n_x][n_y] = 1;
                master.move(cs[i]);
                dfs(master, n_x, n_y);
                master.move(cs[i % 2 == 1 ? i - 1 : i + 1]);
            }
        }
    }
}