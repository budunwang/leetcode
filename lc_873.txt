873.Length of Longest Fibonacci Subsequence
dp[i][j] = dp[index(j - i)][i] + 1; index(j - i) != null
dp[i][j] = 2; index(j - i) = null

1.dfs
public int lenLongestFibSubseq(int[] A) {
    int length = A.length;
    int max = 0;
    for (int i = 0; i < length; i++) {
        int num = A[i];
        for (int j = i - 1; j >= 0; j--) {
            int diff = A[i] - A[j];
            int index = Arrays.binarySearch(A, diff);
            if (index > -1 && index < j) {
                int count = dfs(A, j, i);
                if (count > 2) {
                    max = Math.max(max, count);
                }
            }
        }
    }
    return max;
}

public int dfs(int[] A, int start, int end) {
    int diff = A[end] - A[start];
    int index = Arrays.binarySearch(A, diff);
    if (index > -1 && index < start) {
        return dfs(A, index, start) + 1;
    }
    return 2;
}

2.dfs + memo
public int lenLongestFibSubseq(int[] A) {
    int length = A.length;
    int[][] dp = new int[length][length];
    int max = 0;
    for (int i = 0; i < length; i++) {
        int num = A[i];
        for (int j = i - 1; j >= 0; j--) {
            int diff = A[i] - A[j];
            int index = Arrays.binarySearch(A, diff);
            if (index > -1 && index < j) {
                int count = dfs(A, j, i, dp);
                if (count > 2) {
                    max = Math.max(max, count);
                }
            }
        }
    }
    return max;
}

public int dfs(int[] A, int start, int end, int[][] dp) {
    if (dp[start][end] != 0) {
        return dp[start][end];
    }
    int diff = A[end] - A[start];
    int index = Arrays.binarySearch(A, diff);
    if (index > -1 && index < start) {
        dp[start][end] = dfs(A, index, start, dp) + 1;
    } else {
        dp[start][end] = 2;
    }
    return dp[start][end];
}

3.dp
public int lenLongestFibSubseq(int[] A) {
    int length = A.length;
    int[][] dp = new int[length][length];
    Map<Integer, Integer> map = new HashMap<Integer, Integer>();
    int max = 0;
    for (int i = 0; i < length - 1; i++) {
        map.put(A[i], i);
        for (int j = i + 1; j < length; j++) {
            dp[i][j] = 2;
        }
    }
    for (int i = 2; i < length; i++) {
        for (int j = i - 1; j >= 0; j--) {
            int diff = A[i] - A[j];
            if (map.get(diff) == null) {
                continue;
            }
            int index = map.get(diff);
            if (index >= j) {
                break;
            }
            dp[j][i] = dp[index][j] + 1;
            max = Math.max(max, dp[j][i]);
        }
    }
    return max;
}

4.dp
public int lenLongestFibSubseq(int[] A) {
    int length = A.length;
    Set<Integer> set = new HashSet<Integer>();
    int max = 0;
    for (int i : A) {
        set.add(i);
    }
    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            int start = A[i];
            int end = A[j];
            int cur = 2;
            while (set.contains(start + end)) {
                end = start + end;
                start = end - start;
                cur++;
            }
            max = Math.max(max, cur);
        }
    }
    return max > 2 ? max : 0;
}