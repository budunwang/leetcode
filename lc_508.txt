508.Most Frequent Subtree Sum
public Map<Integer, Integer> map;
public int max;

public int[] findFrequentTreeSum(TreeNode root) {
    map = new HashMap<Integer, Integer>();
    max = 0;
    List<Integer> list = new ArrayList<Integer>();
    dfs(root);
    for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
        if (entry.getValue() == max) {
            list.add(entry.getKey());
        }
    }
    int[] res = new int[list.size()];
    int i = 0;
    for (Integer num : list) {
        res[i++] = num;
    }
    return res;
}

public int dfs(TreeNode root) {
    if (root == null) {
        return 0;
    }
    int sum = root.val + dfs(root.left) + dfs(root.right);
    int num = map.getOrDefault(sum, 0);
    map.put(sum, num + 1);
    max = Math.max(max, num + 1);
    return sum;
}