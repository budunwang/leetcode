886.Possible Bipartition
785
public boolean possibleBipartition(int N, int[][] dislikes) {
    if (dislikes.length == 0) {
        return true;
    }
    Map<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();
    for (int[] arr : dislikes) {
        if (!map.containsKey(arr[0])) {
            map.put(arr[0], new ArrayList<Integer>());
        }
        map.get(arr[0]).add(arr[1]);
        if (!map.containsKey(arr[1])) {
            map.put(arr[1], new ArrayList<Integer>());
        }
        map.get(arr[1]).add(arr[0]);
    }
    int[] visited = new int[N + 1];
    for (int i = 1; i <= N; i++) {
        if (visited[i] == 0 && !dfs(map, i, visited, 1)) {
            return false;
        }
    }
    return true;
}

public boolean dfs(Map<Integer, List<Integer>> map, int index, int[] visited, int color) {
    if (visited[index] != 0) {
        return visited[index] != color;
    }
    visited[index] = color == 1 ? 2 : 1;
    if (!map.containsKey(index)) {
        return true;
    }
    for (int i : map.get(index)) {
        if (!dfs(map, i, visited, visited[index])) {
            return false;
        }
    }
    return true;
}