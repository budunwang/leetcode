210.Course Schedule II
207
public int[] findOrder(int numCourses, int[][] prerequisites) {
    ArrayList[] graph = new ArrayList[numCourses];
    int[] degree = new int[numCourses];
    for (int i = 0; i < numCourses; i++) {
        graph[i] = new ArrayList<Integer>();
    }
    for (int i = 0; i < prerequisites.length; i++) {
        degree[prerequisites[i][0]]++;
        graph[prerequisites[i][1]].add(prerequisites[i][0]);
    }
    
    Queue<Integer> queue = new LinkedList<Integer>();
    int count = 0;
    int[] res = new int[numCourses];
    for (int i = 0; i < numCourses; i++) {
        if (degree[i] == 0) {
            queue.add(i);
            res[count] = i;
            count++;
        }
    }
    
    while (queue.size() != 0) {
        int node = queue.poll();
        for (int i = 0; i < graph[node].size(); i++) {
            int j = (int)graph[node].get(i);
            degree[j]--;
            if (degree[j] == 0) {
                queue.add(j);
                res[count] = j;
                count++;
            }
        }
    }
    
    if (count != numCourses) {
        return new int[0];
    }
    return res;
}