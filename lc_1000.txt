1000.Minimum Cost to Merge Stones
internal dp
dp[i][j][1] = dp[i][j][K] + sum(i, j)
dp[i][j][K] = min(dp[i][l][1] + dp[l + 1][j][k - 1])
public int mergeStones(int[] stones, int K) {
    int length = stones.length;
    if ((length - 1) % (K - 1) != 0) {
        return -1;
    }
    int[] sum = new int[length + 1];
    for (int i = 0; i < length; i++) {
        sum[i + 1] = sum[i] + stones[i];
    }
    int[][][] dp = new int[length][length][K + 1];
    for (int i = 0; i < length; i++) {
        for (int j = 0; j < length; j++) {
            for (int k = 0; k <= K; k++) {
                dp[i][j][k] = Integer.MAX_VALUE;
            }
        }
    }
    for (int i = 0; i < length; i++) {
        dp[i][i][1] = 0;
    }
    for (int d = 2; d <= length; d++) {
        for (int i = 0; i < length - d + 1; i++) {
            int j = i + d - 1;
            for (int k = 2; k <= K; k++) {
                for (int l = i; l < j; l += K - 1) {
                    dp[i][j][k] = Math.min(dp[i][j][k], dp[i][l][1] + dp[l + 1][j][k - 1]);
                    dp[i][j][1] = dp[i][j][k] + sum[j + 1] - sum[i];
                }
            }
        }
    }
    return dp[0][length - 1][1];
}