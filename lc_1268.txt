1268.Search Suggestions System
trie tree
1.
public class Node {
    Node[] children;
    List<String> suggestions;
    Node() {
        this.children = new Node[26];
        this.suggestions = new ArrayList<String>();
    }
}

public List<List<String>> suggestedProducts(String[] products, String searchWord) {
    Arrays.sort(products);
    Node root = new Node();
    for (String product : products) {
        build(product, root);
    }
    List<List<String>> res = new ArrayList<List<String>>();
    for (char c : searchWord.toCharArray()) {
        if (root == null || root.children[c - 'a'] == null) {
            res.add(new ArrayList<String>());
            root = null;
        } else {
            res.add(root.children[c - 'a'].suggestions);
            root = root.children[c - 'a'];
        }
    }
    return res;
}

public void build(String str, Node root) {
    for (char c : str.toCharArray()) {
        if (root.children[c - 'a'] == null) {
            root.children[c - 'a'] = new Node();
        }
        root = root.children[c - 'a'];
        if (root.suggestions.size() < 3) {
            root.suggestions.add(str);
        }
    }
}
2.
public class TrieNode {
    Character val;
    List<TrieNode> list;
    List<String> suggestions;
    TrieNode(Character c) {
        val = c;
        list = new ArrayList<TrieNode>();
        suggestions = new ArrayList<String>();
    }
}

public List<List<String>> res;

public List<List<String>> suggestedProducts(String[] products, String searchWord) {
    res = new ArrayList<List<String>>();
    TrieNode root = new TrieNode('0');
    for (String product : products) {
      buildTrieTree(product, root, 0);
    }
    getSuggestion(searchWord, root, 0);
    return res;
}

public String buildTrieTree(String str, TrieNode node, int index) {
    if (index == str.length()) {
        return str;
    }
    Character target = str.charAt(index);
    for (TrieNode trieNode : node.list) {
      if (trieNode.val == target) {
        String suggestion = buildTrieTree(str, trieNode, index + 1);
        trieNode.suggestions.add(suggestion);
        return suggestion;
      }
    }
    TrieNode trieNode = new TrieNode(target);
    node.list.add(trieNode);
    String suggestion = buildTrieTree(str, trieNode, index + 1);
    trieNode.suggestions.add(suggestion);
    return suggestion;
}

public void getSuggestion(String str, TrieNode node, int index) {
    if (index == str.length()) {
        return;
    }
    for (TrieNode trieNode : node.list) {
        if (trieNode.val == str.charAt(index)) {
            PriorityQueue<String> pq = new PriorityQueue<String>();
            for (String suggestion : trieNode.suggestions) {
                pq.add(suggestion);
            }
            int limit = 0;
            List<String> list = new ArrayList<String>();
            while (limit < 3 && !pq.isEmpty()) {
                list.add(pq.poll());
                limit++;
            }
            res.add(list);
            getSuggestion(str, trieNode, index + 1);
            return;
        }
    }
    for (int i = index; i < str.length(); i++) {
        res.add(new ArrayList<String>());
    }
}