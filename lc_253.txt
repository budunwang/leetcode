253.Meeting Rooms II
729
1.TreeMap
Count the maximum rooms with time stamp
public int minMeetingRooms(int[][] intervals) {
    Map<Integer, Integer> map = new TreeMap<Integer, Integer>();
    for (int[] interval : intervals) {
        map.put(interval[0], map.getOrDefault(interval[0], 0) + 1);
        map.put(interval[1], map.getOrDefault(interval[1], 0) - 1);
    }
    int max = 0;
    int cur = 0;
    for (int n : map.values()) {
        cur += n;
        max = Math.max(max, cur);
    }
    return max;
}

2.sort and greedy
Sort by start.
Maintain the min heap to record the first-end meeting.
If first-end meeting ends before the new meeting starts, keep the room and add new meeting end.
If first-end meeting ends after the new meeting starts, add one new room and add new meeting end.
public int minMeetingRooms(int[][] intervals) {
    Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
    PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
    for (int[] interval : intervals) {
        if (pq.isEmpty() || pq.peek() > interval[0]) {
            pq.offer(interval[1]);
        } else {
            pq.poll();
            pq.offer(interval[1]);
        }
    }
    return pq.size();
}