1245.Tree Diameter
public int treeDiameter(int[][] edges) {
    Map<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>();
    for (int[] edge : edges) {
        map.putIfAbsent(edge[0], new ArrayList<Integer>());
        map.get(edge[0]).add(edge[1]);
        map.putIfAbsent(edge[1], new ArrayList<Integer>());
        map.get(edge[1]).add(edge[0]);
    }
    int[] n0 = findNode(map, edges[0][0]);
    int[] n1 = findNode(map, n0[0]);
    return n1[1];
}

public int[] findNode(Map<Integer, List<Integer>> map, int idx) {
    Queue<Integer> queue = new LinkedList<Integer>();
    Set<Integer> visited = new HashSet<Integer>();
    queue.offer(idx);
    visited.add(idx);
    int level = -1;
    int res = idx;
    while (!queue.isEmpty()) {
        int size = queue.size();
        for (int i = 0; i < size; i++) {
            int n = queue.poll();
            res = n;
            for (int next : map.get(n)) {
                if (!visited.contains(next)) {
                    queue.offer(next);
                    visited.add(next);
                }
            }
        }
        level++;
    }
    return new int[] { res, level };
}