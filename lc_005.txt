5.Longest Palindromic Substring

解法一
暴力解法。
超时。
class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.equals("")) {
            return "";
        }
        int start = 0;
        int end = 0;
        char[] chars = s.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            for (int j = i; j < chars.length; j++) {
                if (isPalindrome(s, i, j) && j - i >= end - start) {
                    start = i;
                    end = j;
                }
            }
        }
        return s.substring(start, end + 1); 
    }

    public boolean isPalindrome(String s, int start, int end) {
        while(start <= end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}

解法二
中心向外判断回文。
public String longestPalindrome(String s) {
    if (s == null || s.equals("")) {
        return "";
    }
    int[] curIndex = new int[2];
    for (int i = 0; i < s.length(); i++) {
        isPalindrome(s, i, i, curIndex);
        isPalindrome(s, i, i + 1, curIndex);
    }
    return s.substring(curIndex[0], curIndex[1] + 1); 
}

public int[] isPalindrome(String s, int start, int end, int[] curIndex) {
    while(start >= 0 && end < s.length() && s.charAt(start) == s.charAt(end)) {
        start--;
        end++;
    }
    start++;
    end--;
    int curLength = curIndex[1] - curIndex[0] + 1;
    int length = end - start + 1;
    if (length >= curLength) {
        curIndex[0] = start;
        curIndex[1] = end;
    }
    return curIndex;
}