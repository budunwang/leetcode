1391.Check if There is a Valid Path in a Grid
public int[][] visited;

public boolean hasValidPath(int[][] grid) {
    int[][][] map = {
        {{}, {}, {}, {}},
        {{}, {1, 3, 5}, {}, {1, 4, 6}},
        {{2, 3, 4}, {}, {2, 5, 6}, {}},
        {{}, {}, {2, 5, 6}, {1, 4, 6}},
        {{}, {1, 3, 5}, {2, 5, 6}, {}},
        {{2, 3, 4}, {}, {}, {1, 4, 6}},
        {{2, 3, 4}, {1, 3, 5}, {}, {}},
    };
    visited = new int[grid.length][grid[0].length];
    return dfs(map, grid, 0, 0);
}

public boolean dfs(int[][][] map, int[][] grid, int i, int j) {
    int row = grid.length;
    int col = grid[0].length;
    if (i == row - 1 && j == col - 1) {
        return true;
    }
    if (visited[i][j] == 1) {
        return false;
    }
    visited[i][j] = 1;
    int[][] dirs = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    for (int a = 0; a < 4; a++) {
        int n_i = i + dirs[a][0];
        int n_j = j + dirs[a][1];
        if (n_i >= 0 && n_i < row && n_j >= 0 && n_j < col) {
            int[] nextMap = map[grid[i][j]][a];
            for (int b = 0; b < nextMap.length; b++) {
                if (grid[n_i][n_j] == nextMap[b]) {
                    if (dfs(map, grid, n_i, n_j)) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}