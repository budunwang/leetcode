42.Trapping Rain Water
num[i] = min(leftMax, rightMax) - height[i]
1.preSum
public int trap(int[] height) {
    int length = height.length;
    int[] left = new int[length];
    int[] right = new int[length];
    int max = 0;
    for (int i = 0; i < length; i++) {
        max = Math.max(max, height[i]);
        left[i] = max;
    }
    max = 0;
    for (int i = length - 1; i >= 0; i--) {
        max = Math.max(max, height[i]);
        right[i] = max;
    }
    int sum = 0;
    for (int i = 0; i < length; i++) {
        sum += Math.min(left[i], right[i]) - height[i];
    }
    return sum;
}
2.two pointer
public int trap(int[] height) {
    if (height.length == 0) {
        return 0;
    }
    int left = 0;
    int right = height.length - 1;
    int leftMax = height[left];
    int rightMax = height[right];
    int sum = 0;
    while (left < right) {
        if (leftMax < rightMax) {
            sum += leftMax - height[left];
            left++;
            leftMax = Math.max(leftMax, height[left]);                
        } else {
            sum += rightMax - height[right];
            right--;
            rightMax = Math.max(rightMax, height[right]);   
        }
    }
    return sum;
}