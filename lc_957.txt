957.Prison Cells After N Days
public int[] prisonAfterNDays(int[] cells, int N) {
    Set<Integer> set = new HashSet<Integer>();
    boolean isCycle = false;
    int start = 0;
    for (int i = 0; i < N; i++) {
        int[] arr = next(cells);
        int cur = toNum(arr);
        if (!set.contains(cur)) {
            isCycle = true;
            set.add(cur);
            start++;
        } else {
            break;
        }
        cells = arr;
    }
    if (isCycle) {
        int index = N % start;
        for (int i = 0; i < index; i++) {
            int[] arr = next(cells);
            cells = arr;
        }
    }
    return cells;
}

public int[] next(int[] arr) {
    int[] res = new int[8];
    for (int i = 1; i < 7; i++) {
        if ((arr[i - 1] == 1 && arr[i + 1] == 1) || (arr[i - 1] == 0 && arr[i + 1] == 0)) {
            res[i] = 1;
        } else {
            res[i] = 0;
        }
    }
    return res;
}

public int toNum(int[] arr) {
    int sum = 0;
    int count = 1;
    for (int i = 0; i < 8; i++) {
        sum += count * arr[8 - i - 1];
        count *= 2;
    }
    return sum;
}

public int[] toArray(int num) {
    int[] arr = new int[8];
    String str = Integer.toBinaryString(num);
    for (int i = 8 - str.length(); i < 8; i++) {
        arr[i] = str.charAt(i - 8 + str.length()) - '0';
    }
    return arr;
}