1590.Make Sum Divisible by P
presum + hashmap
525
974
(totalSum - (sum[j] - sum[i])) % p = 0, i < j
=> totalSum % p = sum[j] % p  - sum[i] % p
=> sum[i] % p = sum[j] % p - totalSum % p
即在j位置时，如果存在i，满足sum[i] % p = sum[j] % p - totalSum % p，那么去除nums[i] ~ nums[j]后必然被p整除
(sum[j] % p - totalSum % p + p) % p，处理小于0的情况
public int minSubarray(int[] nums, int p) {
    int sum = 0;
    for (int num : nums) {
        sum = (sum + num) % p;
    }
    Map<Integer, Integer> map = new HashMap<Integer, Integer>();
    map.put(0, -1);
    int cur = 0;
    int min = nums.length;
    for (int i = 0; i < nums.length; i++) {
        cur = (cur + nums[i]) % p;
        map.put(cur, i);
        int need = (cur - sum + p) % p;
        if (map.containsKey(need)) {
            min = Math.min(min, i - map.get(need));
        }
    }
    return min == nums.length ? -1 : min;
}