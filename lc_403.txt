403.Frog Jump
1.dfs + memo
public Boolean[][] dp;

public boolean canCross(int[] stones) {
    dp = new Boolean[stones.length][stones.length];
    return dfs(stones, 0, 0);
}

public boolean dfs(int[] stones, int idx, int k) {
    if (idx == stones.length - 1) {
        return true;
    }
    if (dp[idx][k] != null) {
        return dp[idx][k];
    }
    for (int i = idx + 1; i < stones.length && stones[i] - stones[idx] <= k + 1; i++) {
        int diff = stones[i] - stones[idx];
        if (diff >= k - 1 && diff <= k + 1) {
            if (dfs(stones, i, diff)) {
                dp[idx][k] = true;
                return true;
            }
        }
    }
    dp[idx][k] = false;
    return false;
}
2.dp
public boolean canCross(int[] stones) {
    int length = stones.length;
    boolean[][] dp = new boolean[length][length];
    dp[0][1] = true;
    for (int i = 1; i < length; i++) {
        for (int j = 0; j < i; j++) {
            int diff = stones[i] - stones[j];
            if (diff < length) {
                dp[i][diff] = dp[j][diff - 1] || dp[j][diff] || (diff + 1 < length && dp[j][diff + 1]);
                if (i == length - 1 && dp[i][diff]) {
                    return true;
                }
            }
        }
    }
    return false;
}