244.Shortest Word Distance II
Map<String, List<Integer>> map;

public WordDistance(String[] words) {
    map = new HashMap<String, List<Integer>>();
    for (int i = 0; i < words.length; i++) {
        if (!map.containsKey(words[i])) {
            map.put(words[i], new ArrayList<Integer>());
        }
        map.get(words[i]).add(i);
    }
}

public int shortest(String word1, String word2) {
    List<Integer> l1 = map.get(word1);
    List<Integer> l2 = map.get(word2);
    int min = Integer.MAX_VALUE;
    int idx1 = 0;
    int idx2 = 0;
    while (idx1 < l1.size() && idx2 < l2.size()) {
        int n1 = l1.get(idx1);
        int n2 = l2.get(idx2);
        if (n1 < n2) {
            min = Math.min(min, n2 - n1);
            idx1++;
        } else {
            min = Math.min(min, n1 - n2);
            idx2++;
        }
    }
    return min;
}