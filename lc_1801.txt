1801.Number of Orders in the Backlog
public int getNumberOfBacklogOrders(int[][] orders) {
    int mod = (int) 1e9 + 7;
    PriorityQueue<int[]> buy = new PriorityQueue<int[]>((a, b) -> b[0] - a[0]);
    PriorityQueue<int[]> sell = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);
    for (int[] order : orders) {
        if (order[2] == 0) {
            while (!sell.isEmpty() && sell.peek()[0] <= order[0] && order[1] > 0) {
                int[] tmp = sell.poll();
                int num = Math.min(order[1], tmp[1]);
                order[1] -= num;
                tmp[1] -= num;
                if (tmp[1] > 0) {
                    sell.offer(tmp);
                }
            }
            if (order[1] > 0) {
                buy.offer(new int[] { order[0], order[1] });
            }
        } else {
            while (!buy.isEmpty() && buy.peek()[0] >= order[0] && order[1] > 0) {
                int[] tmp = buy.poll();
                int num = Math.min(order[1], tmp[1]);
                order[1] -= num;
                tmp[1] -= num;
                if (tmp[1] > 0) {
                    buy.offer(tmp);
                }
            }
            if (order[1] > 0) {
                sell.offer(new int[] { order[0], order[1] });
            } 
        }
    }
    long sum = 0;
    while (!buy.isEmpty()) {
        sum = (sum + buy.poll()[1]) % mod;
    }
    while (!sell.isEmpty()) {
        sum = (sum + sell.poll()[1]) % mod;
    }
    return (int) sum;
}