208.Implement Trie (Prefix Tree)
class TrieNode {
    TrieNode[] children;
    boolean isEnd;
    TrieNode() {
        children = new TrieNode[26];
        isEnd = false;
    }
}

public TrieNode root;

/** Initialize your data structure here. */
public Trie() {
    root = new TrieNode();
}

/** Inserts a word into the trie. */
public void insert(String word) {
    TrieNode node = root;
    for (char c : word.toCharArray()) {
        int idx = c - 'a';
        if (node.children[idx] == null) {
            node.children[idx] = new TrieNode();
        }
        node = node.children[idx];
    }
    node.isEnd = true;
}

/** Returns if the word is in the trie. */
public boolean search(String word) {
    int length = word.length();
    TrieNode node = root;
    for (char c : word.toCharArray()) {
        int idx = c - 'a';
        if (node.children[idx] == null) {
            return false;
        } else {
            node = node.children[idx]; 
        }
    }
    return node.isEnd;
}

/** Returns if there is any word in the trie that starts with the given prefix. */
public boolean startsWith(String prefix) {
    int length = prefix.length();
    TrieNode node = root;
    for (char c : prefix.toCharArray()) {
        int idx = c - 'a';
        if (node.children[idx] == null) {
            return false;
        } else {
            node = node.children[idx]; 
        }
    }
    return true;
}