851.Loud and Rich
解法一
广度遍历。
无法记录访问值。
超时。
public int[] loudAndRich(int[][] richer, int[] quiet) {
    int length = quiet.length;
    int[] res = new int[length];
    ArrayList<List<Integer>> arr = new ArrayList<List<Integer>>();
    for (int i = 0; i < length; i++) {
        arr.add(new ArrayList<Integer>(Arrays.asList(i)));
    }
    for (int i = 0; i < richer.length; i++) {
        arr.get(richer[i][1]).add(richer[i][0]);
    }
    for (int i = 0; i < length; i++) {
        int min = i;
        Queue<Integer> queue = new LinkedList<Integer>();
        List<Integer> list = arr.get(i);
        for (int j : list) {
            queue.add(j);
        }
        while(queue.size() != 0) {
            int size = queue.size();
            for (int k = 0; k < size; k++) {
                int num = queue.poll();
                if (quiet[num] < quiet[min]) {
                    min = num;
                }
                if (i !=  num) {
                    List<Integer> list_2 = arr.get(num);
                    if (list_2.size() != 1) {
                        for (int l : list_2) {
                            if (l != num) {
                                queue.add(l);
                            }
                        }
                    }
                }
            }
        }
        res[i] = min;
    }
    return res;
}

解法二
深度遍历加记录。
public int[] loudAndRich(int[][] richer, int[] quiet) {
    int length = quiet.length;
    int[] res = new int[length];
    ArrayList<List<Integer>> arr = new ArrayList<List<Integer>>();
    for (int i = 0; i < length; i++) {
        res[i] = -1;
        arr.add(new ArrayList<Integer>());
    }
    for (int i = 0; i < richer.length; i++) {
        arr.get(richer[i][1]).add(richer[i][0]);
    }
    for (int i = 0; i < length; i++) {
        dfs(i, arr, quiet, res);
    }
    return res;
}

public int dfs(int num, List<List<Integer>> arr, int[] quiet, int[] res) {
    // 已访问过的值，直接返回
    if (res[num] != -1) {
        return res[num];
    }
    List<Integer> list = arr.get(num);
    // 叶结点，返回
    if (list.size() == 0) {
        res[num] = num;
        return num;
    }
    // 默认最小值是自身
    int min = num;
    for (int l : list) {
        int n = dfs(l, arr, quiet, res);
        if (quiet[min] >= quiet[n]) {
            min = n;
        }
    }
    // 记录已访问过的值
    res[num] = min;
    return min;
}