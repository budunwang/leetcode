105.Construct Binary Tree from Preorder and Inorder Traversal
preorder[0] is always root.
inorder[indexof preorder[0]] is mid of tree. left is left tree. right is right tree.

public TreeNode buildTree(int[] preorder, int[] inorder) {
    return dfs(preorder, inorder, 0 , 0, inorder.length);
}

public TreeNode dfs(int[] preorder, int[] inorder, int p_i, int i_i, int i_j) {
    if (p_i >= preorder.length || i_i >= i_j) {
        return null;
    }
    int index = 0;
    for (int i = i_i; i < i_j; i++) {
        if (inorder[i] == preorder[p_i]) {
            index = i;
            break;
        }
    }
    TreeNode treeNode = new TreeNode(preorder[p_i]);
    treeNode.left = dfs(preorder, inorder, p_i + 1, i_i, index);
    treeNode.right = dfs(preorder, inorder, p_i + index - i_i + 1, index + 1, i_j);
    return treeNode;
}