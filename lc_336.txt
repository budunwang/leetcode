336.Palindrome Pairs
public List<List<Integer>> palindromePairs(String[] words) {
    Map<String, Integer> map = new HashMap<String, Integer>();
    for (int i = 0; i < words.length; i++) {
        map.put(words[i], i);
    }
    List<List<Integer>> list = new ArrayList<List<Integer>>();
    for (int i = 0; i < words.length; i++) {
        for (int j = 0; j < words[i].length(); j++) {
            String s1 = words[i].substring(0, j);
            String s2 = words[i].substring(j, words[i].length());
            if (isPalindrome(s1)) {
                String str = new StringBuilder(s2).reverse().toString();
                if (map.containsKey(str) && map.get(str) != i) {
                    list.add(Arrays.asList(map.get(str), i));
                }
            }
            if (isPalindrome(s2)) {
                String str = new StringBuilder(s1).reverse().toString();
                if (map.containsKey(str) && map.get(str) != i) {
                    list.add(Arrays.asList(i, map.get(str)));
                }
                if (j == 0 && map.containsKey("")) {
                    list.add(Arrays.asList(map.get(""), i));
                }
            }
        }
    }
    return list;
}

public boolean isPalindrome(String str) {
    int left = 0;
    int right = str.length() - 1;
    while (left < right) {
        if (str.charAt(left) == str.charAt(right)) {
            left++;
            right--;
        } else {
            return false;
        }
    }
    return true;
}