84.Largest Rectangle in Histogram
1.O(n^2)
public int largestRectangleArea(int[] heights) {
    int length = heights.length;
    int max = 0;
    for (int i = 0; i < length; i++) {
        int min = Integer.MAX_VALUE;
        for (int j = i; j < length; j++) {
            min = Math.min(min, heights[j]);
            max = Math.max(max, min * (j - i + 1));
        }
    }
    return max;
}

2.monostack
1.
if x1 < x2 && x1 > x3 && x2 > x3,
x1 and x2 can only be count as effective area before x3,
the largest height after x3 is x3.
so calculate area of x1 and x2 (height > x3) before x3.
2.
store effective height as monostack
3.
add the end to clear existing stack after array 

public int largestRectangleArea(int[] heights) {
    if (heights == null || heights.length == 0) {
        return 0;
    }
    int length = heights.length;
    int max = 0;
    Stack<Integer> stack = new Stack<Integer>();
    for (int i = 0; i <= length; i++) {
        while (!stack.isEmpty() && (i == length || heights[i] <= heights[stack.peek()])) {
            int cur = stack.pop();
            int width = stack.isEmpty() ? i : i - stack.peek() - 1;
            max = Math.max(max, width * heights[cur]);
        }
        stack.push(i);
    }
    return max;
}