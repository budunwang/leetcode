45.Jump Game II
解法一
动态规划。
倒序计算每一步到达终点的最短步数并记录，直至起点为结果。
超时。
public int jump(int[] nums) {
    if (nums == null || nums.length == 0) {
        return 0;
    }
    int[] dp = new int[nums.length];
    dp[nums.length - 1] = 0;
    for (int i = nums.length - 2; i >= 0; i--) {
        int min = nums.length;
        int distance = nums[i];
        if (distance == 0) {
            dp[i] = min;
            continue;
        }
        for (int j = 1; j <= distance; j++) {
            if (i + j < nums.length) {
                min = Math.min(min, dp[i + j] + 1);
            } else {
                min = 1;
            }
        }
        dp[i] = min;
    }
    return dp[0];
}

解法二
贪心算法。
从起点开始，每次计算一步的移动范围，再根据移动范围计算出下一步的移动范围，直至终点或超过终点。
注意数组个数为一时的结果。
public int jump(int[] nums) {
    if (nums == null || nums.length == 0 || nums.length == 1) {
        return 0;
    }
    int start = 0;
    int end = 0;
    int res = 0;
    int maxLength = 0;
    while (end < nums.length) {
        res++;
        for (int i = start; i <= end; i++) {
            maxLength = Math.max(maxLength, nums[i] + i);
            if (maxLength >= nums.length - 1) {
                return res;
            }
        }
        start = end;
        end = maxLength;
    }
    return res;
}