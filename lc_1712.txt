1712.Ways to Split Array Into Three Subarrays
public int waysToSplit(int[] nums) {
    int length = nums.length;
    int mod = (int) 1e9 + 7;
    for (int i = 1; i < length; i++) {
        nums[i] += nums[i - 1];
    }
    long res = 0;
    for (int i = 1; i < length; i++) {
        if (nums[i] > nums[length - 1] / 3) {
            break;
        }
        int left = search(nums, i, true);
        int right = search(nums, i, false);
        if (left != -1 && right != -1) {
            res = (res + (right - left + 1)) % mod;
        }
    }
    return (int) res;
}

public int search(int[] arr, int start, boolean isFloor) {
    int left = start;
    int right = arr.length - 1;
    int res = -1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        int first = arr[start - 1];
        int second = arr[mid] - first;
        int third = arr[arr.length - 1] - arr[mid];
        if (first <= second && second <= third) {
            res = mid;
            if (isFloor) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        } else if (first > second) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return res;
}