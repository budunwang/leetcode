399.Evaluate Division
public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
    Map<String, Map<String, Double>> map = new HashMap<String, Map<String, Double>>();
    for (int i = 0; i < equations.size(); i++) {
        String a = equations.get(i).get(0);
        String b = equations.get(i).get(1);
        if (!map.containsKey(a)) {
            map.put(a, new HashMap<String, Double>());
        }
        if (!map.containsKey(b)) {
            map.put(b, new HashMap<String, Double>());
        }
        map.get(a).put(b, values[i]);
        map.get(b).put(a, 1 / values[i]);
    }
    double[] res = new double[queries.size()];
    for (int i = 0; i < queries.size(); i++) {
        String a = queries.get(i).get(0);
        String b = queries.get(i).get(1);
        if (!map.containsKey(a) && !map.containsKey(b)) {
            res[i] = -1.0;
        } else {
            if (a == b) {
                res[i] = 1.0;
            } else {
                res[i] = dfs(map, a, b, new HashSet<String>());
            }
        }
    }
    return res;
}

public double dfs(Map<String, Map<String, Double>> map, String a, String b, Set<String> visited) {
    if (!map.containsKey(a)) {
        return -1.0;
    }
    Map<String, Double> tmp = map.get(a);
    if (tmp.containsKey(b)) {
        return tmp.get(b);
    }
    for (Map.Entry<String, Double> entry : tmp.entrySet()) {
        String c = entry.getKey();
        Double num = entry.getValue();
        if (visited.contains(c)) {
            continue;
        }
        visited.add(c);
        Double res = dfs(map, c, b, visited);
        visited.remove(c);
        if (res != -1.0) {
            return num * res;
        }
    }
    return -1.0;
}