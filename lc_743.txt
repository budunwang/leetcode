743.Network Delay Time
Dijkstra
public int networkDelayTime(int[][] times, int N, int K) {
    int res = 0;
    Map<Integer, List<int[]>> map = new HashMap<Integer, List<int[]>>();
    for (int[] time : times) {
        int start = time[0];
        int end = time[1];
        int weight = time[2];
        if (!map.containsKey(start)) {
            List<int[]> list = new ArrayList<int[]>();
            map.put(start, list);
        }
        map.get(start).add(new int[] { end, weight });
    }
    int[] visited = new int[101];
    PriorityQueue<int[]> pq = new  PriorityQueue<int[]>((a, b) -> a[1] - b[1]);
    pq.add(new int[] { K, 0 });
    while (!pq.isEmpty()) {
        int[] node = pq.poll();
        int end = node[0];
        int weight = node[1];
        if (visited[end] == 1) {
            continue;
        }
        visited[end] = 1;
        res = weight;
        N--;
        if (!map.containsKey(end)) {
            continue;
        }
        List<int[]> nodes = map.get(end);
        for (int[] n : nodes) {
            pq.add(new int[] { n[0], weight + n[1]});
        }
    }
    return N == 0 ? res : -1;
}

Bellman-Ford
public int networkDelayTime(int[][] times, int N, int K) {
    int[] dis = new int[N + 1];
    for (int i = 0; i <= N; i++) {
        dis[i] = Integer.MAX_VALUE;
    }
    dis[K] = 0;
    for (int i = 0; i < N; i++) {
        int length = times.length;
        for (int j = 0; j < length; j++) {
            int start = times[j][0];
            int end = times[j][1];
            int weight = times[j][2];
            if (dis[start] != Integer.MAX_VALUE && dis[end] > dis[start] + weight) {
                dis[end] = dis[start] + weight;
            }
        }
    }
    int max = 0;
    for (int i = 1; i <= N; i++) {
        max = Math.max(max, dis[i]);
    }
    return max == Integer.MAX_VALUE ? -1 : max;
}