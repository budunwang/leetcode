301.Remove Invalid Parentheses
dfs + 剪枝
1.递归同时维护括号数量
如果右括号大于左括号数量，直接返回。
在终止时，直接比较左右括号数量是否相等，避免重复计算。
2.提前计算出应移除的括号数量
当左括号个数为0时，右括号是必须移除的。
多余的左括号是必须移除的。
在递归前获得应移除的括号数，进一步剪枝。
public List<String> removeInvalidParentheses(String s) {
    int left = 0;
    int right = 0;
    for (char c : s.toCharArray()) {
        if (c == '(') {
            left++;
        } else if (c == ')') {
            if (left > 0) {
                left--;
            } else {
                right++;
            }
        }
    }
    Set<String> set = new HashSet<String>();
    dfs(s, set, new StringBuilder(), 0, 0, left, right);
    return new ArrayList<String>(set);
}

public void dfs(String s, Set<String> set, StringBuilder sb, int idx, int count, int left, int right) {
    if (idx == s.length()) {
        if (count == 0 && left == 0 && right == 0) {
            set.add(sb.toString());
        }
        return;
    }
    if (count < 0) {
        return;
    }
    char c = s.charAt(idx);
    if (c == '(') {
        if (left > 0) {
            dfs(s, set, sb, idx + 1, count, left - 1, right);
        }
        sb.append(c);
        dfs(s, set, sb, idx + 1, count + 1, left, right);
        sb.	deleteCharAt(sb.length() - 1);
    } else if (c == ')') {
        if (right > 0) {
            dfs(s, set, sb, idx + 1, count, left, right - 1);
        }
        sb.append(c);
        dfs(s, set, sb, idx + 1, count - 1, left, right);
        sb.	deleteCharAt(sb.length() - 1);
    } else {
        sb.append(c);
        dfs(s, set, sb, idx + 1, count, left, right);
        sb.	deleteCharAt(sb.length() - 1);
    }
}