1383.Maximum Performance of a Team
sort and heap
public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
    int mod = (int) 1e9 + 7;
    int[][] arr = new int[n][2];
    for (int i = 0; i < n; i++) {
        arr[i] = new int[] { speed[i], efficiency[i] };
    }
    Arrays.sort(arr, (a, b) -> b[1] - a[1]);
    PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
    long sum = 0;
    long max = 0;
    for (int i = 0; i < n; i++) {
        int[] tmp = arr[i];
        pq.offer(tmp[0]);
        sum += tmp[0];
        if (pq.size() > k) {
            sum -= pq.poll();
        }
        max = Math.max(max, tmp[1] * sum);
    }
    return (int) (max % mod);
}