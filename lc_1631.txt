1631.Path With Minimum Effort
743
Dijskra
public int minimumEffortPath(int[][] heights) {
    int row = heights.length;
    int col = heights[0].length;
    int[][] dirs = new int[][] {{ 0, -1 }, { 1, 0 }, { 0, 1 }, { -1, 0 }};
    int[][] map = new int[row][col];
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            map[i][j] = Integer.MAX_VALUE;
        }
    }
    PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[2] - b[2]);
    pq.offer(new int[] { 0, 0, 0 });
    while (!pq.isEmpty()) {
        int[] arr = pq.poll();
        if (arr[0] == row - 1 && arr[1] == col - 1) {
            return arr[2];
        }
        for (int[] dir : dirs) {
            int n_x = arr[0] + dir[0];
            int n_y = arr[1] + dir[1];
            if (n_x >= 0 && n_x < row && n_y >= 0 && n_y < col) {
                int effort = Math.max(arr[2], Math.abs(heights[n_x][n_y] - heights[arr[0]][arr[1]]));
                if (map[n_x][n_y] > effort) {
                    map[n_x][n_y] = effort;
                    pq.offer(new int[] { n_x, n_y, effort });
                }
            }
        }
    }
    return 0;
}