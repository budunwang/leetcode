238.Product of Array Except Self
1.O(n) without division
nums[i] = left[0 ~ i - 1] * right[i + 1 ~ length]
public int[] productExceptSelf(int[] nums) {
    int length = nums.length;
    int[] left = new int[length];
    int[] right = new int[length];
    left[0] = 1;
    right[length - 1] = 1;
    for (int i = 1; i < length; i++) {
        left[i] = left[i - 1] * nums[i - 1];
    }
    for (int i = length - 2; i >= 0; i--) {
        right[i] = right[i + 1] * nums[i + 1];
    }
    for (int i = 0; i < length; i++) {
        nums[i] = left[i] * right[i];
    }
    return nums;
}
2.O(1) without division
public int[] productExceptSelf(int[] nums) {
    int length = nums.length;
    int[] arr = new int[length];
    arr[0] = 1;
    for (int i = 1; i < length; i++) {
        arr[i] = arr[i - 1] * nums[i - 1];
    }
    int right = 1;
    for (int i = length - 1; i >= 0; i--) {
        arr[i] *= right;
        right *= nums[i];
    }
    return arr;
}
3.O(n) with division
public int[] productExceptSelf(int[] nums) {
    int product = 1;
    int isZero = 0;
    for (int num : nums) {
        if (num == 0) {
            isZero++;
            continue;
        }
        product *= num;
    }
    for (int i = 0; i < nums.length; i++) {
        if (isZero == 1) {
            if (nums[i] != 0) {
                nums[i] = 0;
            } else {
                nums[i] = product;
            }
        } else if (isZero > 1) {
            nums[i] = 0;
        } else {
            nums[i] = product / nums[i];
        }
    }
    return nums;
}