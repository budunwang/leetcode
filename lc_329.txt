329.Longest Increasing Path in a Matrix
dfs + memo
public int row;
public int col;
public int[][] dirs;
public int[][] dp;

public int longestIncreasingPath(int[][] matrix) {
    row = matrix.length;
    col = matrix[0].length;
    dirs = new int[][] {{ -1, 0 }, { 0, 1 }, { 1, 0 }, { 0, -1 }};
    dp = new int[row][col];
    int max = 0;
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            max = Math.max(max, dfs(matrix, i, j));
        }
    }
    return max;
}

public int dfs(int[][] matrix, int x, int y) {
    if (dp[x][y] != 0) {
        return dp[x][y];
    }
    int max = 1;
    for (int[] dir : dirs) {
        int n_x = x + dir[0];
        int n_y = y + dir[1];
        if (n_x >= 0 && n_x < row && n_y >= 0 && n_y < col && matrix[x][y] < matrix[n_x][n_y]) {
            max = Math.max(max, 1 + dfs(matrix, n_x, n_y));
        }
    }
    dp[x][y] = max;
    return max;
}