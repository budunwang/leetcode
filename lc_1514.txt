1514.Path with Maximum Probability
Dijkstra
public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
    List<double[]>[] map = new ArrayList[n];
    for (int i = 0; i < n; i++) {
        map[i] = new ArrayList<double[]>();
    }
    for (int i = 0; i < edges.length; i++) {
        map[edges[i][0]].add(new double[] { edges[i][1], succProb[i] });
        map[edges[i][1]].add(new double[] { edges[i][0], succProb[i] });
    }
    PriorityQueue<double[]> pq = new PriorityQueue<double[]>((a, b) -> b[1] >= a[1] ? 1 : -1);
    Set<Double> visited = new HashSet<Double>();
    pq.offer(new double[] { start, 1 });
    while (!pq.isEmpty()) {
        double[] head = pq.poll();
        double next = head[0];
        double prob = head[1];
        if (next == end) {
            return prob;
        }
        visited.add(next);
        for (double[] arr : map[(int) next]) {
            if (!visited.contains(arr[0])) {
                pq.offer(new double[] { arr[0], arr[1] * prob });
            }
        }
    }
    return 0;
}