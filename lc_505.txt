505.The Maze II
490
bfs
Update point distance when point is not visited or has longer distance.
public int shortestDistance(int[][] maze, int[] start, int[] destination) {
    int row = maze.length;
    int col = maze[0].length;
    int[][] dirs = new int[][] {{ -1, 0 }, { 0, 1 }, { 1, 0 }, { 0, -1 }};
    int[][] visited = new int[row][col];
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            visited[i][j] = -1;
        }
    }
    Queue<int[]> queue = new LinkedList<int[]>();
    queue.offer(start);
    visited[start[0]][start[1]] = 0;
    while (!queue.isEmpty()) {
        int size = queue.size();
        for (int i = 0; i < size; i++) {
            int[] arr = queue.poll();
            for (int[] dir : dirs) {
                int count = visited[arr[0]][arr[1]] + 1;
                int n_x = arr[0] + dir[0];
                int n_y = arr[1] + dir[1];
                while (n_x >= 0 && n_x < row && n_y >= 0 && n_y < col && maze[n_x][n_y] == 0) {
                    n_x += dir[0];
                    n_y += dir[1];
                    count++;
                }
                n_x -= dir[0];
                n_y -= dir[1];
                count--;
                if (visited[n_x][n_y] == -1 || visited[n_x][n_y] > count) {
                    visited[n_x][n_y] = count;
                    queue.offer(new int[] { n_x, n_y });
                }
            }
        }
    }
    return visited[destination[0]][destination[1]];
}