30.Substring with Concatenation of All Words
public List<Integer> findSubstring(String s, String[] words) {
    if (words.length == 0) {
        return new ArrayList<Integer>();
    }
    Map<String, Integer> map = new HashMap<String, Integer>();
    for (String word : words) {
        map.put(word, map.getOrDefault(word, 0) + 1);
    }
    List<Integer> list = new ArrayList<Integer>();
    int wordLength = words[0].length();
    int curLength = words[0].length() * words.length;
    for (int i = 0; i + curLength <= s.length(); i++) {
        Map<String, Integer> curMap = new HashMap<String, Integer>();
        boolean isValid = true;
        for (int j = 0; j < curLength; j += wordLength) {
            String subStr = s.substring(i + j, i + j + wordLength);
            curMap.put(subStr, curMap.getOrDefault(subStr, 0) + 1);
            if (!map.containsKey(subStr) || map.get(subStr) < curMap.get(subStr)) {
                isValid = false;
                break;
            }
        }
        if (isValid) {
            list.add(i);
        }
    }
    return list;
}