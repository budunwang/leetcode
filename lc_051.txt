51.N-Queens
dfs
public List<List<String>> res;
public int[] col;
public int[] l_45;
public int[] l_135;

public List<List<String>> solveNQueens(int n) {
    res = new ArrayList<List<String>>();
    col = new int[n];
    l_45 = new int[2 * n - 1];
    l_135 = new int[2 * n - 1];
    dfs(new ArrayList<String>(), 0, n);
    return res;
}

public void dfs(List<String> list, int i, int n) {
    if (list.size() == n) {
        res.add(new ArrayList<String>(list));
        return;
    }
    if (i == n) {
        return;
    }
    for (int j = 0; j < n; j++) {
        int n_45 = i + j;
        int n_135 = i - j + n - 1;
        if (col[j] == 0 && l_45[n_45] == 0 && l_135[n_135] == 0) {
            col[j] = 1;
            l_45[n_45] = 1;
            l_135[n_135] = 1;
            StringBuilder sb = new StringBuilder();
            for (int k = 0; k < j; k++) {
                sb.append(".");
            }
            sb.append("Q");
            for (int k = j + 1; k < n; k++) {
                sb.append(".");
            }
            list.add(sb.toString());
            dfs(list, i + 1, n);
            col[j] = 0;
            l_45[n_45] = 0;
            l_135[n_135] = 0;
            list.remove(list.size() - 1);
        }
    }
}