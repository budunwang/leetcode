132.Palindrome Partitioning II
dp
two dp: palindrome dp and partition dp
palindrome dp: interval dp for palindrome validation
partition dp: dp for min cut
dp[i] = min(dp[j]) + 1, j < i && string i ~ j is palindrome

public boolean[][] palindrome;
public int[] dp;

public int minCut(String s) {
    int length = s.length();
    palindrome = new boolean[length][length];
    dp = new int[length];
    for (boolean[] arr : palindrome) {
        Arrays.fill(arr, true);
    }
    for (int d = 2; d <= length; d++) {
        for (int i = 0; i < length - d + 1 ; i++) {
            int j = i + d - 1;
            palindrome[i][j] = s.charAt(i) == s.charAt(j) && palindrome[i + 1][j - 1];
        }
    }
    return dfs(s, length - 1);
}

public int dfs(String s, int idx) {
    if (palindrome[0][idx]) {
        return 0;
    }
    if (dp[idx] != 0) {
        return dp[idx];
    }
    int min = Integer.MAX_VALUE;
    for (int i = idx; i >= 0; i--) {
        if (palindrome[i][idx]) {
            min = Math.min(min, dfs(s, i - 1) + 1);
        }
    }
    dp[idx] = min;
    return min;
}