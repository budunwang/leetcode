353.Design Snake Game
queue
public List<int[]> snake;
public Set<String> set;
public int[][] lists;
public int row;
public int col;
public int idx;

/** Initialize your data structure here.
    @param width - screen width
    @param height - screen height 
    @param food - A list of food positions
    E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
public SnakeGame(int width, int height, int[][] food) {
    snake = new ArrayList<int[]>();
    set = new HashSet<String>();
    lists = food;
    row = height;
    col = width;
    idx = 0;
    int[] next = new int[] { 0, 0 };
    set.add(Arrays.toString(next));
    snake.add(next);
}

/** Moves the snake.
    @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
    @return The game's score after the move. Return -1 if game over. 
    Game over when snake crosses the screen boundary or bites its body. */
public int move(String direction) {
    int[] head = snake.get(0);
    int n_i = head[0];
    int n_j = head[1];
    if (direction.equals("U")) {
        n_i--;
    } else if (direction.equals("L")) {
        n_j--; 
    } else if (direction.equals("R")) {
        n_j++;
    } else {
        n_i++;
    }
    int[] next = new int[] { n_i, n_j };
    if (n_i < 0 || n_i >= row || n_j < 0 || n_j >= col) {
        return -1;
    }
    if (idx < lists.length && n_i == lists[idx][0] && n_j == lists[idx][1]) {
        idx++;
    } else {
        set.remove(Arrays.toString(snake.get(snake.size() - 1)));
        snake.remove(snake.size() - 1);
    }
    if (set.contains(Arrays.toString(next))) {
        return -1;
    }
    set.add(Arrays.toString(next));
    snake.add(0, next);
    return idx;
}