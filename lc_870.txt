870.Advantage Shuffle
greedy
public int[] advantageCount(int[] A, int[] B) {
    int length = A.length;
    Arrays.sort(A);
    int[] arr = B.clone();
    Arrays.sort(arr);
    Map<Integer, Queue<Integer>> map = new HashMap<Integer, Queue<Integer>>();
    Queue<Integer> queue = new LinkedList<Integer>();
    int idx = 0;
    for (int i = 0; i < length; i++) {
        while (idx != length && A[idx] <= arr[i]) {
            queue.offer(A[idx]);
            idx++;
        }
        if (idx == length) {
            break;
        }
        if (!map.containsKey(arr[i])) {
            map.put(arr[i], new LinkedList<Integer>());
        }
        map.get(arr[i]).offer(A[idx]);
        idx++;
    }
    for (int i = 0; i < length; i++) {
        if (map.containsKey(B[i]) && !map.get(B[i]).isEmpty()) {
            B[i] = map.get(B[i]).poll();
        } else {
            B[i] = queue.poll();
        }
    }
    return B;
}