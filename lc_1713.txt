1713.Minimum Operations to Make a Subsequence
public int minOperations(int[] target, int[] arr) {
    Map<Integer, Integer> map = new HashMap<Integer, Integer>();
    for (int i = 0; i < target.length; i++) {
        map.put(target[i], i);
    }
    List<Integer> stack = new ArrayList<Integer>();
    int max = 0;
    for (int i = 0; i < arr.length; i++) {
        if (map.containsKey(arr[i])) {
            int idx = map.get(arr[i]);
            if (stack.size() == 0 || stack.get(stack.size() - 1) < idx) {
                stack.add(idx);
            } else {
                int left = 0;
                int right = stack.size() - 1;
                while (left < right) {
                    int mid = left + (right - left) / 2;
                    if (stack.get(mid) < idx) {
                        left = mid + 1;
                    } else {
                        right = mid;
                    }
                }
                stack.set(left, idx);
            }
        }
    }
    return target.length - stack.size();
}