845.Longest Mountain in Array
计算最长峰值。
注意峰值必须包含上坡与下坡，只有上坡或下坡或平都不是有效值。
正向，反向各遍历一次。
反向记录下坡长度。
正向记录上坡长度。
当包含上下坡时，计算最大值。

解法一
public int longestMountain(int[] A) {
    if (A.length == 0) {
        return 0;
    }
    int length = A.length;
    int[] sum = new int[length];
    int max = 0;
    sum[length - 1] = 1;
    for (int i = length - 2; i >= 0; i--) {
        sum[i] = A[i] <= A[i + 1] ? 1 : sum[i + 1] + 1;
    }
    int l = 0;
    for (int i = 0; i < length; i++) {
        if (i == 0 || A[i] <= A[i - 1]) {
            l = 1;
        } else {
            l++;
            if (sum[i] != 1) {
                max = Math.max(max, sum[i] + l - 1);
            }
        }
    }
    return max;
}

解法二
一次遍历。
public int longestMountain(int[] A) {
    if (A.length == 0) {
        return 0;
    }
    int length = A.length;
    int top = 1;
    int down = 1;
    int max = 0;
    for (int i = 1; i < length; i++) {
        if (A[i] == A[i - 1] || (down > 1 && A[i] > A[i - 1])) {
            top = 1;
            down = 1;
        }
        if (A[i] > A[i - 1]) {
            top++;
        }
        if (A[i] < A[i - 1]) {
            down++;
        }
        if (top != 1 && down != 1) {
            max = Math.max(max, top + down - 1);
        }
    }
    return max;
}