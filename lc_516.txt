516.Longest Palindromic Subsequence
dp
public int longestPalindromeSubseq(String s) {
    int[][] dp = new int[s.length()][s.length()];
    for (int i = s.length() - 1; i >= 0; i--) {
        dp[i][i] = 1;
        for (int j = i + 1; j < s.length(); j++) {
            if (s.charAt(i) == s.charAt(j)) {
                dp[i][j] = 2 + dp[i + 1][j - 1];
            } else {
                dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);
            }
        }
    }
    return dp[0][s.length() - 1];
}

dfs
public int longestPalindromeSubseq(String s) {
    return dfs(s, 0, s.length() - 1);
}

public int dfs(String s, int start, int end) {
    if (start > end || end > s.length() - 1|| start < 0) {
        return 0;
    }
    if (start == end) {
        return 1;
    }
    if (s.charAt(start) == s.charAt(end)) {
        return 2 + dfs(s, start + 1, end - 1);
    }
    return Math.max(dfs(s, start + 1, end), dfs(s, start, end - 1));
}

dfs + memo
public int[][] dp;

public int longestPalindromeSubseq(String s) {
    dp = new int[s.length()][s.length()];
    return dfs(s, 0, s.length() - 1);
}

public int dfs(String s, int start, int end) {
    if (dp[start][end] != 0) {
        return dp[start][end];
    }
    if (start > end || end > s.length() - 1|| start < 0) {
        return 0;
    }
    if (start == end) {
        dp[start][end] = 1;
        return 1;
    }
    if (s.charAt(start) == s.charAt(end)) {
        dp[start][end] = 2 + dfs(s, start + 1, end - 1);
    } else {
        dp[start][end] = Math.max(dfs(s, start + 1, end), dfs(s, start, end - 1));
    }
    return dp[start][end];
}