1091.Shortest Path in Binary Matrix
public int shortestPathBinaryMatrix(int[][] grid) {
    int n = grid.length;
    if (grid[0][0] != 0 || grid[n - 1][n - 1] != 0) {
        return -1;
    }
    Queue<int[]> queue = new LinkedList<int[]>();
    queue.add(new int[] { 0, 0 });
    int count = 0;
    while (!queue.isEmpty()) {
        int size = queue.size();
        for (int i = 0; i < size; i++) {
            int[] arr = queue.poll();
            int x = arr[0];
            int y = arr[1];
            if (x == n - 1 && y == n - 1) {
                return count + 1;
            }
            if (x > 0 && y > 0 && grid[x - 1][y - 1] == 0) {
                grid[x - 1][y - 1] = 2;
                queue.add(new int[] { x - 1, y - 1 });
            }
            if (x > 0 && grid[x - 1][y] == 0) {
                grid[x - 1][y] = 2;
                queue.add(new int[] { x - 1, y });
            }
            if (x > 0 && y < n - 1 && grid[x - 1][y + 1] == 0) {
                grid[x - 1][y + 1] = 2;
                queue.add(new int[] { x - 1, y + 1 });
            }
            if (y > 0 && grid[x][y - 1] == 0) {
                grid[x][y - 1] = 2;
                queue.add(new int[] { x, y - 1 });
            }
            if (y < n - 1 && grid[x][y + 1] == 0) {
                grid[x][y + 1] = 2;
                queue.add(new int[] { x, y + 1 });
            }
            if (x < n - 1 && y > 0 && grid[x + 1][y - 1] == 0) {
                grid[x + 1][y - 1] = 2;
                queue.add(new int[] { x + 1, y - 1 });
            }                
            if (x < n - 1 && grid[x + 1][y] == 0) {
                grid[x + 1][y] = 2;
                queue.add(new int[] { x + 1, y });
            } 
            if (x < n- 1 && y < n - 1 && grid[x + 1][y + 1] == 0) {
                grid[x + 1][y + 1] = 2;
                queue.add(new int[] { x + 1, y + 1 });
            }
        }
        count++;
    }
    return -1;   
}