1705.Maximum Number of Eaten Apples
greedy
优先选过期日最早的苹果
public int eatenApples(int[] apples, int[] days) {
    int sum = 0;
    PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[1] - b[1]);
    for (int i = 0; i < apples.length; i++) {
        if (apples[i] != 0 && days[i] != 0) {
            pq.offer(new int[] { apples[i], i + days[i] - 1 });
        }
        while (!pq.isEmpty() && pq.peek()[1] < i) {
            pq.poll();
        }
        if (!pq.isEmpty()) {
            int[] arr = pq.poll();
            if (arr[0] != 1) {
                pq.offer(new int[] { arr[0] - 1, arr[1] });
            }
            sum++;
        }
    }
    int idx = apples.length;
    while (!pq.isEmpty()) {
        while (!pq.isEmpty() && pq.peek()[1] < idx) {
            pq.poll();
        }
        if (!pq.isEmpty()) {
            int[] arr = pq.poll();
            if (arr[0] != 1) {
                pq.offer(new int[] { arr[0] - 1, arr[1] });
            }
            sum++;
        }
        idx++;
    }
    return sum;
}