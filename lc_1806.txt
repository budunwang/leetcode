1806.Minimum Number of Operations to Reinitialize a Permutation
public int reinitializePermutation(int n) {
    int[] arr = new int[n];
    for (int i = 0; i < n; i++) {
        arr[i] = i;
    }
    int idx = 0;
    int[] next = arr.clone();
    while (idx ==0 || !isSame(arr, next)) {
        next = getNext(next);
        idx++;
    }
    return idx;
}

public int[] getNext(int[] arr) {
    int length = arr.length;
    int[] next = new int[length];
    for (int i = 0; i < length; i++) {
        if (i % 2 == 0) {
            next[i] = arr[i / 2]; 
        } else {
            next[i] = arr[length / 2 + (i - 1) / 2];
        }
    }
    return next;
}

public boolean isSame(int[] a, int[] b) {
    for (int i = 0; i < a.length; i++) {
        if (a[i] != b[i]) {
            return false;
        }
    }
    return true;
}