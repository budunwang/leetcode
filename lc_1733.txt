1733.Minimum Number of People to Teach
public int minimumTeachings(int n, int[][] languages, int[][] friendships) {
    Map<Integer, Set<Integer>> map = new HashMap<Integer, Set<Integer>>();
    for (int i = 0; i < languages.length; i++) {
        map.put(i + 1, new HashSet<Integer>());
        for (int j : languages[i]) {
            map.get(i + 1).add(j);
        }
    }
    boolean[] isConnect = new boolean[friendships.length];
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j < friendships.length; j++) {
            if (map.get(friendships[j][0]).contains(i) && map.get(friendships[j][1]).contains(i)) {
                isConnect[j] = true;
            }
        }
    }
    int min = Integer.MAX_VALUE;
    for (int i = 1; i <= n; i++) {
        Set<Integer> set = new HashSet<Integer>();
        for (int j = 0; j < friendships.length; j++) {
            if (isConnect[j]) {
                continue;
            }
            if (!map.get(friendships[j][0]).contains(i) && !set.contains(friendships[j][0])) {
                set.add(friendships[j][0]);
            }
            if (!map.get(friendships[j][1]).contains(i) && !set.contains(friendships[j][1])) {
                set.add(friendships[j][1]);
            }
        }
        min = Math.min(min, set.size());
    }
    return min;
}