1124.Longest Well-Performing Interval
add every num as sum.
sum[i] = sum[i - 1] + num[i];
=>
sum[i] = sum[j] + Math.sum(num[j + 1], num[j + 2], ... , num[i]) (i > j)

if (sum[i] > 0) it is the result
else we need to find current largest range which sum > 0
if we have Math.sum(num[j + 1], num[j + 2], ... , num[i]) = 1, the first j, the index of (sum[i] - 1), is the start point.
sum[j] can be multiple, only the first j is the largest range.
so we only need to store every first j when sum[j] + 1 <= 0

public int longestWPI(int[] hours) {
    int res = 0;
    int num = 0;
    Map<Integer, Integer> map = new HashMap<Integer, Integer>();
	for (int i = 0; i < hours.length; i++) {
        num += hours[i] > 8 ? 1 : -1;
        if (num > 0) {
            res = i + 1;
        } else {
            if (!map.containsKey(num)) {
                map.put(num, i);                    
            }
            if (map.containsKey(num - 1)) {
                res = Math.max(res, i - map.get(num - 1));
            }
        }
	}
	return res;
}