1477.Find Two Non-overlapping Sub-arrays Each With Target Sum
preSum + dp
dp stores cur min length which is equal to target sum
find second min length if first min length exists
public int minSumOfLengths(int[] arr, int target) {
    int length = arr.length;
    int[] leftMin = new int[length];
    Arrays.fill(leftMin, Integer.MAX_VALUE);
    Map<Integer, Integer> map = new HashMap<Integer, Integer>();
    map.put(0, -1);
    int sum = 0;
    int curMin = Integer.MAX_VALUE;
    int min = Integer.MAX_VALUE;
    for (int i = 0; i < length; i++) {
        sum += arr[i];
        if (map.containsKey(sum - target)) {
            int prev = map.get(sum - target);
            if (prev >= 0 && leftMin[prev] != Integer.MAX_VALUE) {
                min = Math.min(min, i - prev + leftMin[prev]);
            }
            curMin = Math.min(curMin, i - prev);
        }
        leftMin[i] = curMin;
        map.put(sum, i);
    }
    return min == Integer.MAX_VALUE ? -1 : min;
}