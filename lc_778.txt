778.Swim in Rising Water
Dijkstra
public int swimInWater(int[][] grid) {
    int length = grid.length;
    int[][] dirs = new int[][] {{ -1, 0 }, { 0, 1 }, { 1, 0 }, { 0, -1 }};
    PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[2] - b[2]);
    pq.offer(new int[] { 0, 0, grid[0][0] });
    int max = 0;
    grid[0][0] = -1;
    while (!pq.isEmpty()) {
        int[] arr = pq.poll();
        max = Math.max(max, arr[2]);
        if (arr[0] == length - 1 && arr[1] == length - 1) {
            return max;
        }
        for (int[] dir : dirs) {
            int x = arr[0] + dir[0];
            int y = arr[1] + dir[1];
            if (x >= 0 && x < length && y >= 0 && y < length && grid[x][y] != -1) {
                pq.offer(new int[] { x, y, grid[x][y] });
                grid[x][y] = -1;
            }
        }
    }
    return max;
}