355.Design Twitter
public class TwitterUser {
    public Integer userId;
    public Set<Integer> follows;
    public List<Tweet> tweets;
    
    public TwitterUser(Integer userId) {
        this.userId = userId;
        this.follows = new HashSet<Integer>();
        this.tweets = new ArrayList<Tweet>();
        this.follows.add(userId);
    }
    
    public void post(Tweet tweet) {
        tweets.add(tweet);
    }
    
    public void follow(int followeeId) {
        follows.add(followeeId);
    }
    
    public void remove(int followeeId) {
        if (userId == followeeId) {
            return;
        }
        follows.remove(followeeId);
    }
}

public class Tweet {
    public int tweetId;
    public int tweetStamp;
    
    public Tweet(int tweetId, int tweetStamp) {
        this.tweetId = tweetId;
        this.tweetStamp = tweetStamp;
    }
}

public Map<Integer, TwitterUser> userMap;
public int stamp;

/** Initialize your data structure here. */
public Twitter() {
    userMap = new HashMap<Integer, TwitterUser>();
    stamp = 0;
}

/** Compose a new tweet. */
public void postTweet(int userId, int tweetId) {
    Tweet tweet = new Tweet(tweetId, stamp++);
    if (!userMap.containsKey(userId)) {
        userMap.put(userId, new TwitterUser(userId));
    }
    userMap.get(userId).post(tweet);        
}

/** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
public List<Integer> getNewsFeed(int userId) {
    TwitterUser twitterUser = userMap.getOrDefault(userId, new TwitterUser(userId));
    PriorityQueue<Tweet> pq = new PriorityQueue<Tweet>((a, b) -> a.tweetStamp - b.tweetStamp);
    for (int followeeId : twitterUser.follows) {
        if (userMap.containsKey(followeeId)) {
            for (Tweet tweet : userMap.get(followeeId).tweets) {
                pq.offer(tweet);
                if (pq.size() > 10) {
                    pq.poll();
                }
            }
        }
    }
    List<Integer> list = new ArrayList<Integer>();
    while (!pq.isEmpty()) {
        list.add(0, pq.poll().tweetId);
    }
    return list;
}

/** Follower follows a followee. If the operation is invalid, it should be a no-op. */
public void follow(int followerId, int followeeId) {
    if (!userMap.containsKey(followerId)) {
        userMap.put(followerId, new TwitterUser(followerId));
    }
    userMap.get(followerId).follow(followeeId);  
}

/** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
public void unfollow(int followerId, int followeeId) {
    if (!userMap.containsKey(followerId)) {
        userMap.put(followerId, new TwitterUser(followerId));
    }
    userMap.get(followerId).remove(followeeId);  
}