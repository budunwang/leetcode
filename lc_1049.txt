1049.Last Stone Weight II
divide into two group number
every group sum should be nearly close to total sum / 2
knapsack
i is stone number, knap volumn is total sum / 2
dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - stones[i]] + stones[i]);
public int lastStoneWeightII(int[] stones) {
        int sum = 0;
        for (int stone : stones) {
            sum += stone;
        }
        int target = sum / 2;
        int[][] dp = new int[stones.length][target + 1];
        for (int i = 0; i <= target; i++) {
            dp[0][i] = stones[0] <= i ? stones[0] : 0; 
        }
        for (int i = 1; i < stones.length; i++) {
            for (int j = 0; j <= target; j++) {
                if (j < stones[i]) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - stones[i]] + stones[i]);
                }
            }
        }
        return Math.abs(sum - dp[stones.length - 1][target] * 2);
    }
}

public int lastStoneWeightII(int[] stones) {
    int sum = 0;
    for (int stone : stones) {
        sum += stone;
    }
    int target = sum / 2;
    boolean[][] dp = new boolean[stones.length + 1][target + 1];
    for (int i = 0; i <= stones.length; i++) {
        dp[i][0] = true; 
    }
    for (int i = 1; i <= stones.length; i++) {
        for (int j = stones[i - 1]; j <= target; j++) {
            if (j < stones[i - 1]) {
                dp[i][j] = dp[i - 1][j];
            } else {
                dp[i][j] = dp[i - 1][j] | dp[i - 1][j - stones[i - 1]];
            }
        }
    }
    for (int i = target; i >= 0; i--) {
        if (dp[stones.length][i]) {
            return Math.abs(sum - i * 2);
        }
    }
    return 0;
}

public int lastStoneWeightII(int[] stones) {
    int sum = 0;
    for (int stone : stones) {
        sum += stone;
    }
    int target = sum / 2;
    boolean[] dp = new boolean[target + 1];
    dp[0] = true; 
    for (int i = 0; i < stones.length; i++) {
        for (int j = target; j >= stones[i]; j--) {
            dp[j] = dp[j] | dp[j - stones[i]];
        }
    }
    for (int i = target; i >= 0; i--) {
        if (dp[i]) {
            return Math.abs(sum - i * 2);
        }
    }
    return 0;
}