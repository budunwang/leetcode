314.Binary Tree Vertical Order Traversal
bfs
public List<List<Integer>> verticalOrder(TreeNode root) {
    if (root == null) {
        return new ArrayList<List<Integer>>();
    }
    Map<TreeNode, Integer> map = new HashMap<TreeNode, Integer>();
    Map<Integer, List<Integer>> levelMap = new HashMap<Integer, List<Integer>>();
    int min = 0;
    int max = 0;
    Queue<TreeNode> queue = new LinkedList<TreeNode>();
    queue.offer(root);
    map.put(root, 0);
    while (!queue.isEmpty()) {
        int size = queue.size();
        for (int i = 0; i < size; i++) {
            TreeNode treeNode = queue.poll();
            int level = map.get(treeNode);
            if (!levelMap.containsKey(level)) {
                levelMap.put(level, new ArrayList<Integer>());
                min = Math.min(min, level);
                max = Math.max(max, level);
            }
            levelMap.get(level).add(treeNode.val);
            if (treeNode.left != null) {
                queue.offer(treeNode.left);
                map.put(treeNode.left, level - 1);
            }
            if (treeNode.right != null) {
                queue.offer(treeNode.right);
                map.put(treeNode.right, level + 1);
            }
        }
    }
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    for (int i = min; i <= max; i++) {
        res.add(levelMap.get(i));
    }
    return res;
}