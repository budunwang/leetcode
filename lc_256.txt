256.Paint House
li_515
动态规划。
当前颜色的最小值必然等于前一个两种颜色中的最小值与当前颜色的和。
public int minCost(int[][] costs) {
    if (costs.length == 0 || costs[0].length == 0) {
        return 0;
    }
    int length = costs.length;
    for (int i = 1; i < length; i++) {
        costs[i][0] += Math.min(costs[i - 1][1], costs[i - 1][2]);
        costs[i][1] += Math.min(costs[i - 1][0], costs[i - 1][2]);
        costs[i][2] += Math.min(costs[i - 1][0], costs[i - 1][1]);
    }
    return Math.min(costs[length - 1][0], Math.min(costs[length - 1][1], costs[length - 1][2]));
}