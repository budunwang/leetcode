1182.Shortest Distance to Target Color
binary search
public List<Integer> shortestDistanceColor(int[] colors, int[][] queries) {
    List<Integer>[] lists = new ArrayList[4];
    for (int i = 1; i <= 3; i++) {
        lists[i] = new ArrayList<Integer>();
    }
    for (int i = 0; i < colors.length; i++) {
        lists[colors[i]].add(i);
    }
    List<Integer> res = new ArrayList<Integer>();
    for (int i = 0; i < queries.length; i++) {
        if (colors[queries[i][0]] == queries[i][1]) {
            res.add(0);
        } else {
            List<Integer> list = lists[queries[i][1]];
            if (list.size() == 0) {
                res.add(-1);
            } else {
                int idx = Collections.binarySearch(list, queries[i][0]);
                if (idx < 0) {
                    idx = -(idx + 1);
                }
                if (idx == 0) {
                    res.add(list.get(0) - queries[i][0]);
                } else if (idx == list.size()) {
                    res.add(queries[i][0] - list.get(list.size() - 1));
                } else {
                    res.add(Math.min(queries[i][0] - list.get(idx - 1), list.get(idx) - queries[i][0]));
                }
            }
        }
    }
    return res;
}