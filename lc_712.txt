712.Minimum ASCII Delete Sum for Two Strings
LCS
1143
1.dfs
public int minimumDeleteSum(String s1, String s2) {
    int[] a1 = new int[s1.length()];
    int[] a2 = new int[s2.length()];
    for (int i = 0; i < s1.length(); i++) {
        a1[i] = (int)s1.charAt(i);
    }
    for (int i = 0; i < s2.length(); i++) {
        a2[i] = (int)s2.charAt(i);
    }
    return dfs(a1, a2, a1.length, a2.length);
}

public int dfs(int[] a1, int[] a2, int i, int j) {
    if (i == 0 && j == 0) {
        return 0;
    }
    if (i == 0) {
        return dfs(a1, a2, i, j - 1) + a2[j - 1];
    }
    if (j == 0) {
        return dfs(a1, a2, i - 1, j) + a1[i - 1];
    }
    if (a1[i - 1] == a2[j - 1]) {
        return dfs(a1, a2, i - 1, j - 1);
    }
    return Math.min(dfs(a1, a2, i, j - 1) + a2[j - 1], dfs(a1, a2, i - 1, j) + a1[i - 1]);
}

2.dfs + memo
public int minimumDeleteSum(String s1, String s2) {
    int[] a1 = new int[s1.length()];
    int[] a2 = new int[s2.length()];
    int[][] m = new int[s1.length() + 1][s2.length() + 1];
    for (int i = 0; i < s1.length(); i++) {
        a1[i] = (int)s1.charAt(i);
    }
    for (int i = 0; i < s2.length(); i++) {
        a2[i] = (int)s2.charAt(i);
    }
    for (int i = 0; i < s1.length() + 1; i++) {
        Arrays.fill(m[i], Integer.MAX_VALUE);
    }
    return dfs(a1, a2, a1.length, a2.length, m);
}

public int dfs(int[] a1, int[] a2, int i, int j, int[][] m) {
    if (m[i][j] != Integer.MAX_VALUE) {
        return m[i][j];
    }
    if (i == 0 && j == 0) {
        m[i][j] = 0;
        return 0;
    }
    if (i == 0) {
        m[i][j] = dfs(a1, a2, i, j - 1, m) + a2[j - 1];
        return m[i][j];
    }
    if (j == 0) {
        m[i][j] = dfs(a1, a2, i - 1, j, m) + a1[i - 1];
        return m[i][j];
    }
    if (a1[i - 1] == a2[j - 1]) {
        m[i][j] = dfs(a1, a2, i - 1, j - 1, m);
        return m[i][j];
    }
    m[i][j] = Math.min(dfs(a1, a2, i, j - 1, m) + a2[j - 1], dfs(a1, a2, i - 1, j, m) + a1[i - 1]);
    return m[i][j];
}

3.dp
public int minimumDeleteSum(String s1, String s2) {
    int l1 = s1.length();
    int l2 = s2.length();
    int[][] dp = new int[l1 + 1][l2 + 1];
    for (int i = 1; i <= l1; i++) {
        dp[i][0] = dp[i - 1][0] + s1.charAt(i - 1);
    }
    for (int i = 1; i <= l2; i++) {
        dp[0][i] = dp[0][i - 1] + s2.charAt(i - 1);
    }
    for (int i = 1; i <= l1; i++) {
        for (int j = 1; j <= l2; j++) {
            if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                dp[i][j] = dp[i - 1][j - 1];
            } else {
                dp[i][j] = Math.min(dp[i - 1][j] + s1.charAt(i - 1), dp[i][j - 1] + s2.charAt(j - 1));
            }
        }
    }
    return dp[l1][l2];
}